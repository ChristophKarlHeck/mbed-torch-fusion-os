// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCALARTYPE_EXECUTORCH_FLATBUFFER_H_
#define FLATBUFFERS_GENERATED_SCALARTYPE_EXECUTORCH_FLATBUFFER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 7,
             "Non-compatible flatbuffers version included");

namespace executorch_flatbuffer {

enum class ScalarType : int8_t {
  BYTE = 0,
  CHAR = 1,
  SHORT = 2,
  INT = 3,
  LONG = 4,
  HALF = 5,
  FLOAT = 6,
  DOUBLE = 7,
  BOOL = 11,
  QINT8 = 12,
  QUINT8 = 13,
  QINT32 = 14,
  QUINT4X2 = 16,
  QUINT2X4 = 17,
  MIN = BYTE,
  MAX = QUINT2X4
};

inline const ScalarType (&EnumValuesScalarType())[14] {
  static const ScalarType values[] = {
    ScalarType::BYTE,
    ScalarType::CHAR,
    ScalarType::SHORT,
    ScalarType::INT,
    ScalarType::LONG,
    ScalarType::HALF,
    ScalarType::FLOAT,
    ScalarType::DOUBLE,
    ScalarType::BOOL,
    ScalarType::QINT8,
    ScalarType::QUINT8,
    ScalarType::QINT32,
    ScalarType::QUINT4X2,
    ScalarType::QUINT2X4
  };
  return values;
}

inline const char * const *EnumNamesScalarType() {
  static const char * const names[19] = {
    "BYTE",
    "CHAR",
    "SHORT",
    "INT",
    "LONG",
    "HALF",
    "FLOAT",
    "DOUBLE",
    "",
    "",
    "",
    "BOOL",
    "QINT8",
    "QUINT8",
    "QINT32",
    "",
    "QUINT4X2",
    "QUINT2X4",
    nullptr
  };
  return names;
}

inline const char *EnumNameScalarType(ScalarType e) {
  if (::flatbuffers::IsOutRange(e, ScalarType::BYTE, ScalarType::QUINT2X4)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesScalarType()[index];
}

}  // namespace executorch_flatbuffer

#endif  // FLATBUFFERS_GENERATED_SCALARTYPE_EXECUTORCH_FLATBUFFER_H_
